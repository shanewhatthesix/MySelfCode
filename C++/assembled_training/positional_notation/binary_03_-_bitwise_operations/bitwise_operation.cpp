/*

在了解什么是二进制，以及二进制的加法运算之后，我们再来学习其他的位运算。

要知道计算机考试二进制一定是最快的！

最近的CSP考试，位运算也考得越来越多了。

*/

/*

按位与运算 ――&
两个二进制位都为一时结果为1，否则为0
比如：
*---------------------------------------*
|       1   0   1   0   1   0   1   1   |
|---------------------------------------|
| &     0   1   1   1   0   0   0   1   |
|---------------------------------------|
| =     0   0   1   0   0   0   0   1   |
*---------------------------------------*

按位或运算 ――|
两个二进制位都为零时结果为0，否则为1
比如：
*---------------------------------------*
|       1   0   1   0   1   0   1   1   |
|---------------------------------------|
| |     0   1   1   1   0   0   0   1   |
|---------------------------------------|
| =     1	0	1	1	1	0	1	1	|
*---------------------------------------*

按位异或运算 ――^
两个二进制位结果相同为0，不同结果为1
比如：
*---------------------------------------*
|       1   0   1   0   1   0   1   1   |
|---------------------------------------|
| ^     0   1   1   1   0   0   0   1   |
|---------------------------------------|
| =     1	1	0	1	1	0	1	0   |
*---------------------------------------*

按位取反运算 ――~
对二进制位取反，即0变成1，1变成0
比如 ：
*---------------------------------------*
| ~     1   0   1   0   1   0   1   1   |
|---------------------------------------|
| =     0   0   1   0   0   0   0   1   |
*---------------------------------------*
（可用于快速取反码）

左移 ――<<
二进制码左移几位，高位丢弃，右边的空位补 0
比如：
*---------------------------------------*
| <<3   1   0   1   0   1   0   1   1   |
|---------------------------------------|
| =     0	1	0	1	1	0	0	0   |
*---------------------------------------*

左移 ――>>
二进制码左移几位，高位丢弃，右边的空位补 0
比如：
*---------------------------------------*
| >>2   1   0   1   0   1   0   1   1   |
|---------------------------------------|
| =     0	0	1	0	1	0	1	0   |
*---------------------------------------*
注意：前面的位运算都是直接把符号运算进去的，但是右移不动符号位（负数的位移运算会比较复杂，因为涉及到补码 ）。

*/

/*

判断偶数
偶数的二进制，最后一位一定是 0
奇数的二进制，最后一位一定是 1
所以 n&1 如果结果 =0，一定是偶数 ；如果结果 =1，一定是奇数 。

a与0
一个数与自己进行位运算：   | 一个数与零进行位运算:
a & a = a                  | a & 0 = 0
a | a = a                  | a | 0 = a
a ^ a = 0                  | a ^ 0 = a

*/

/*

11 & 30 = 1011

*/
