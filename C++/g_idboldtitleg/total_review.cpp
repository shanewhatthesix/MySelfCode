#include<bits/stdc++.h>
using namespace std;
int main() {
------------------------------------
	/*
	链表节点数据的修改

	定义：在链表中，节点的数据可以通过节点的引用直接进行修改。
	例子：
	// 假设head指向链表中的一个节点
	int data = 39;
	head->data = data; // 将节点的数据修改为39
	链表节点的连接

	定义：在链表中，可以通过修改节点的指针来实现节点之间的连接。
	例子：
	// 假设new是一个新建的节点，head是链表的当前头部节点
	new->next = head; // 将new节点的next指针指向head节点
	head->prev = new; // 如果链表是双向链表，将head节点的prev指针指向new节点
	链表头部的修改

	定义：在链表中，头部节点可以通过重新赋值来修改。
	例子：
	// 假设head是链表的当前头部节点，new是新建的节点
	head = new; // 将链表的头部修改为new节点
	链表节点数据的赋值

	定义：在链表中，可以通过节点的引用来给节点的数据赋值。
	例子：
	// 假设 head 指向链表中的一个节点，且该节点的前驱节点存在
	int data = 97;
	head->prev->data = data; // 将前驱节点的数据修改为97

	*/
---------------------------------
	/*
	修改链表中间节点的值：

	定义：在链表中，将指定节点的值修改为新的值。
	示例：如果有一个链表节点 head，并且 head 指向中间的节点，要将该节点的 data 属性赋值为 39，正确的指令是：
	head->data = 39;
	修改链表第一个节点的值：

	定义：在链表中，将第一个节点的值修改为新的值。
	示例：如果有一个链表节点 head，要将第一个节点的 data 属性赋值为 97，正确的指令是：
	head->data = 97;
	修改链表最后一个节点的值：

	定义：在链表中，将最后一个节点的值修改为新的值。
	示例：如果有一个链表节点 head，并且需要遍历到链表的末尾，将最后一个节点的 data 属性赋值为 100，可以通过遍历链表来实现：
	Node* current = head;
	while (current->next != NULL) {
	current = current->next;
	}
	current->data = 100;
	注意：这里的 Node 是假设的链表节点的数据结构，current 是一个指向当前节点的指针。
	链表节点的插入：

	定义：在链表中插入一个新的节点。
	示例：如果有一个链表节点 head，并且有一个新节点 new，要将 new 节点插入到 head 节点之后，可以这样做：
	new->next = head->next;
	head->next = new;
	链表节点的删除：

	定义：从链表中删除一个节点。
	示例：如果有一个链表节点 head，并且要删除 head 节点之后的节点，可以这样做：
	head->next = head->next->next;
	链表的遍历：

	定义：从头到尾访问链表中的每个节点。
	示例：如果有一个链表节点 head，遍历链表可以这样做：
	Node* current = head;
	while (current != NULL) {
	// 处理当前节点
	current = current->next;
	}

	*/
}
