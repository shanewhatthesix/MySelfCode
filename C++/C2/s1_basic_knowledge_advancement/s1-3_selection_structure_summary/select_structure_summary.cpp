/*
#include<bits/stdc++.h>
using namespace std;
int main()
{
	int num;
	cin>>num;
	switch (num){
		case 1:{cout<<"红薯炖牛肉"<<endl;num+=1;}
		case 2:{cout<<"苹果炒鸡蛋"<<endl;num+=1;}
		case 3:{cout<<"可乐煮香菇"<<endl;num+=1;}
		case 4:{cout<<"豆芽炒黄豆"<<endl;num+=1;}
		case 5:{cout<<"酸奶大米饭"<<endl;num+=1;}
		case 6:{cout<<"茅台炖鱼"<<endl;num+=1;}
		case 7:{cout<<"玉米面包"<<endl;num+=1;}
		case 8:{cout<<"胡萝卜泥"<<endl;num+=1;}
		case 9:{cout<<"巧克力皮蛋粥"<<endl;num+=1;}
		case 10:{cout<<"牛奶香菜汤"<<endl;break;}
  		case 11:{cout<<"秘制小咸菜"<<endl;}
	}

return 0;
}

*/

	/*
	    总结 ：
	    多条件下，读理清条件之间的关系是重中之重。 尤其注意条件之间互相排斥的情况。
	    常见选择结构：switch 、if

	    switch用法:
	    Switch(a){
	    case 1:{代码;}
	    case 2:{代码;}
	    case 3:{代码;}
		}
		注意
		一 switch只能用于判断单个的值而不是条件
		二 case后面当然也是一个值
		三 case不用大括号要用：
		四 如果break不加,那么后面的case都会执行一遍,直到break或者default

	*/
	/*
	#include<bits/stdc++.h>
	using namespace std;
	int main()
	{
		float s1,s2,s3,s4;
		cin>>s1>>s2>>s3>>s4;
		if(s1!=0){cout<<1<<" ";}
		if(s2!=0){cout<<2<<" ";}
		if(s3!=0){cout<<3<<" ";}
		if(s4!=0){cout<<4;}

		return 0;

	}
	*/

