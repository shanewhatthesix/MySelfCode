#include<bits/stdc++.h>
using namespace std;

int main()
{
	/*
	一般算法
	int a,b;
	cin>>a>>b;
	for (int i=a;i>=1;--i){
		if(a%i==0 && b%i==0){
			cout<<i;
			break;
		}
	}
	*/
	
	/*
	欧几里得算法
	
	欧几里得算法又称辗转相除法，用于计算两个非负整数a，B的最大公约数
	
	基本原理是：两个整数的最大公约数 等于 其中较小的数 和 两数相除余数的最大公约数
	
	[A,B]=[A,B/A](A<B):
	*---------------------------------------------------*
	|65 	15      |	76 	52         |100   25    	|
	|---------------------------------------------------|
	|65 % 15 = 5 <- |   76 % 52 = 24   | 100 % 25 = 0   |
	|				|				   |				|
	|15 % 5  = 0    |   52 % 24 = 4 <- |                |
	|               |                  |                |
	|				|	24 % 4 = 0     |                |
	*---------------------------------------------------*
	
	*/
	
	//欧几里得算法实例：计算两个非负整数a，B的最大公约数
	int a,b;
	cin>>a>>b;
	int y=a%b;
	while(y>0){
		a=b;
		b=y;
		y=a%b;
		
	}
	cout<<b;
	
	return 0;
}

